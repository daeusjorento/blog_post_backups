The thing I really want to avoid is specializing myself into one company and getting really 'out of shape' (or only being familiar with hyperspecialized systems) and then being let go and looking around and realizing I have no idea how things work anymore and I have to 'start over' with my career. It can happen, the tech sector moves fast and layoffs have been going on for a while (see layoffs.fyi). How do I inoculate myself to that situation? Or at least minimize the impact and make it easier to bounce back?

First off, staying sharp in any market depends a lot on where you want to go, and sometimes the only way to figure out where you want to go is to get lost. Getting lost, ironically, can build some confidence, similar to driving without a GPS to get to know an area. For example, I thought I wanted to be a manager for a while, partially to be a leader/mentor. Then I started to realizing being a leader/mentor was not restricted to just managers. In fact, sometimes it can be harder to do those things as a manager because they are often too busy managing the team! Had I not been confused about whether I wanted to be a manager or not, I might not have figured out what I actually wanted to do. 

As a data scientist, there are a few different paths to continue on after breaking into the field where you've reached a skill ceiling for the role and started to level out. Again, there's the option of becoming a manager/lead (e.g. managing a team of DS - which can progress as its own path to direction, from line to direction/strategy manager, etc), switching functional IC roles (e.g. to Data Engineer, Machine Learning Engineer, Product Manager, Project Manager, etc - all with different career ladders), switching to a new area (e.g. from product to risk, marketing, finance, etc to expand domain knowledge), switching companies (sometimes just to change environments), chilling there (i.e. working on your work-life balance, e.g. local activism, finishing those art projects, and/or hitting those fitness goals), progressing to a higher level DS (e.g. from senior to staff to principal, etc - working on larger scope DS projects like migrations, cross-functional collaborative projects, etc), further specializing (i.e. digging deeper into one area to become an expert, e.g. conduct research on user behavior around a product or in a specific audience), expanding into side projects (mentoring, consulting, entrepreneurship, podcasting, writing), and something else I'll call 'staying sharp.' Obviously by the end of that big list I started blending some directions. Managers can have a healthy work life balance and work on some big projects, switching roles or companies could mean taking on more scope, etc - these are not mutually exclusive. Priorities can also shift fast (e.g. having a baby, or if/when baby graduates from college), or certain opportunities can arise internally or externally. Also, as layoffs become more common in tech, I am increasingly aware of the value of having a DS portfolio in the cloud (something I recently started in github using kaggle data), regardless of role, to have something you can take with you at any company (something I'll expand on later in this article).

In terms of staying sharp in DS, keep in mind toolsets can often change dramatically. Vertica might scale to become Snowflake (cloud). Excel VBA becomes Airflow ETLs (for scale). SAS/Matlab/SPSS becomes Python/R and notebooks (open source, more flexible). Tableau become Looker (e.g. to scale data sources better). SQL becomes Amplitude for product analytics (but still a lot of SQL). Googling becomes ChatGPT (and maybe a quick Google). Each of these tools is a business, and their platforms can shift and products can change. Maybe a contract ends and the company migrates back to what they had before, or maybe the business outgrows its older solution. Or maybe the industry just moves on (might even happen to SQL one day...). Some of those skillsets are transferrable, but some might not be, for example it can be weirdly painful to lose a UI you've been familiar with for years where you didn't realize how many shortcuts you've been using without thinking.

Even concepts of skill sets can shift. From generalists vs experts, to T-shaped people to paint-drip people. The hard truth is, even if you do everything right at the time, you may end up learning some skillset that doesn't matter in 5-10 years at all. I specialized in FAME and RATS at the Federal Reserve Board - have you even heard of them? Nothing lasts forever and not everything is transferable. Sometimes you have to find something that applies only to this one situation that adds value, which is ultimately more important than any particular skillset. However, what I did learn with RATS and FAME was how to code, debug, and run regressions. Know what they stand for? Regression Analysis Time Series (RATS) and Forecasting And Modeling Environment (FAME). They start to sound a lot more transferrable to DS/ML with the full name - and a lot of what I learned during those years was VERY transferrable (but with a new language learning curve).

Back to the original point - how does one 'stay sharp'? I'll define staying sharp as 'staying marketable' as a data scientist. Said another way, avoid falling behind where your skill set becomes obsolete and you cannot find a job no matter how hard you try. And to be clear, Doomscrolling Linkedin doesn't help you stay sharp.... Now, I'm sure this is annoying, but you stay sharp by... interviewing. I know, I know, it's like saying 'how do you stay in shape?' and the answer is 'by working out more and dieting' and you're like, 'okay, yeah thanks.' But let me explain:

Companies need certain work done, so they make important decisions on resourcing/headcount. They get people (hiring managers) to write a job description, interview, and fill that role. They are willing to pay for it, sometimes quite a lot. Why? Because they need that work done. Because there are jobs that need doing. If you see a job description, someone wants something important done. And job descriptions will include handy details like what tools they often use to solve that job, like SQL, python, ETL, etc. But the tool isn't really the important part, it's just the solution to the problem, the important part is keeping a pulse on the problem. This is actually very similar to product managers looking at their product, what features to add, based on customer data. The data scientist is the product, the features are their skillset, and the customer need is the job description.

Gather up those data points of jobs to be done and you get the market demand for data scientists. And similar to some customer feedback, job descriptions can sometimes be terribly inaccurate to what the actual work entails. So you go to the interview to gather info and learn, not only what they actually want, but how your skills line up with the market (or what you should learn if you don't pass the interview). Also to be clear, interviewing is not a commitment, it's just expressing interest and following through on that interest. And who knows, maybe you will learn something about the role and actually decide you do genuinely want it. It's not really serious until you get an offer, and you are not 'taking someone else's place' here, because if you leave your old position that role is open, meaning the sum is the same.

You can actually augment that data by looking around your own company, or a friend's company, or your network, to see what DS work needs doing that is in the DS wheelhouse to solve (interviewing might even help you notice things internally at your company you might not have otherwise noticed). Knowing how to look for valuable problems is a problem solver's bread and butter, and DS are often just problem solvers trying to understand what is going on with those darn customers.

Remember, before 'careers' was a thing, people just had 'jobs.' They found a job that needed doing somehow, then did that job, then went home. It's still the same principle today, but with a 'career' at a company, people lose sight of that. The stability can make us lose the essence, which can cause folks to cling to the status quo rather than connect to the actual work they are paid for. Granted, stability is not a bad thing, especially in late stage capitalism.... but sometimes foundations are shaken for us for reasons completely out of our control.

Now, you don't have to literally interview constantly, I aim for responding to a recruiter once a month or quarter, even if it's just a 15 minute chat to learn more about the role. It helps me learn what opportunities are out there, and see if maybe there are better solutions to my current problems. I also try not to interview the first year at a role unless I hate it, just to make sure I'm giving it my full attention, but that's just a preference. This is at MOST a once a month thing while employed, just make sure it's not a 'once every 5-10 years you think about the market' kind of thing. Regardless, some skills are transferable to both the current role and a potential future role. Let's do a quick jump into them:

1. Communication: telling a story, listening and reading comprehension. This sets the tone for the others to make sure you actually understand, or can explain what you do/did well enough so the other person understands. This just comes with practice, but for example for writing, reading helps a LOT. Said simply: know how to influence ideas using the local language. See my soft skills debugging article for a bit more soft skills detail.

2. Management. I'm including self-management here, as organizing your time and focus. Good communication doesn't add up if you can't show up on time, or take good care of yourself. I'll even include here the ability to disentangle yourself and your identity from your job. This is for your longevity, to not get TOO narrow in your own identity and stay open to change. Said simply: know how to get things done.

3. Analysis. Be able to read a situation, come up with a strategy, and gain insights from research. Good management, and good communication don't help if you have no substance. This is where experience can help significantly, studying or from putting things into practice and seeing where they fail. Also, figuring our what you know & don't know, and how you learn is its own skillset. Said simply: keep your BS detector strong and learn.

4. Networking (this is where people talk about your personal 'brand'). Reputation can go a long way, especially towards even getting opportunities or interviews in the first place. Finding out about a job is a lot easier than standing out for that role in the current environment. Knowing the hiring manager is a great advantage, but knowing a potential coworker is as well. Said simply: know real people well. Real people are behind every decision and investment, even if it's the person who owns or commissioned the algorithm to be made.

Ultimately what you don't work on consciously won't grow. So to stay sharp you have to make it a priority. You need to make a plan to know what to do, which takes work. Sometimes you get out of shape and then get back in shape, that's totally fine! Life is messy. What I also find helpful is to think of the business at a higher level than data science, or even beyond the business (i.e. looking for green space to expand into). How is the industry? Does the business create products that add real value to their customers? This helps make those smaller question of 'what does data science do within the org' connect better to the big picture. Companies need dashboards and data, otherwise they are flying blind. They need experiments and insights to be able to learn from that data and conduct research that informs strategy, such as prioritizing feature development. Someone has to do that work, why not you?
